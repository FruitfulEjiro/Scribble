// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserType {
  admin
  author
  user
}

enum Status {
  published
  draft
  archived
}

enum PostType {
  regular
  group
}

model User {
  id String @id @default(uuid())
  firstname String
  lastname String
  username String @unique
  email String @unique
  password String
  userType UserType @default(user)
  posts Post[]
  contibutedPosts PostContributors[]
  refreshToken String?
  passwordResetToken String?
  passwordResetTokenExpiresAt DateTime?
  passwordChangedAt DateTime?
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
}

model Post {
  id String @id @default(uuid())
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  title String 
  content String
  tags String[]
  category String
  type PostType
  contributors PostContributors[]
  status Status @default(published)
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
}

model PostContributors {
  @@id([userId, postId])
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  userId String
  postId String
}